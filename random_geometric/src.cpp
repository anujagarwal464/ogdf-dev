/*
 * http://en.wikipedia.org/wiki/Random_geometric_graph
 *
 * A random geometric graph is a random undirected graph drawn
 * on a bounded region. It is generated by
 *  1. Placing vertices at random uniformly and independently on the region
 *  2. Connecting two vertices, u, v if and only if the distance between them
 *	   is at most a threshold r, i.e. d (u, v) â‰¤ r.
 */

#include <iostream>
#include <cmath>
#include <random>

#include <ogdf/basic/Graph.h> 
#include <ogdf/basic/NodeArray.h>
#include <ogdf/basic/geometry.h>

using std::cout;
using std::minstd_rand;
using std::uniform_int_distribution;
using std::uniform_real_distribution;
using namespace ogdf;

//! Creates a Random Geometeric Graph by laying out nodes in a unit cube. 
/**
* @param G is assigned the generated graph.
* @param n is the number of nodes of the generated graph.
* @param r is threshold radius.
*/
void randomGeometric(Graph &G, int n, double r) {
	G.clear();
	if (n == 0) return;

	minstd_rand rng(randomSeed());
	uniform_real_distribution<> dist(0, 1);

	Array<node> v(n);
	NodeArray<double> x(G, 0.0);
	NodeArray<double> y(G, 0.0);
	NodeArray<double> z(G, 0.0);

	for (int i = 0; i < n; i++) {
		v[i] = G.newNode();
		x[i] = dist(rng);
		y[i] = dist(rng);
		z[i] = dist(rng);
	}

	for (int i = 0; i < n; i++) {
		for (int j = 0; j < n; j++) {
			double d = sqrt((x[i] - x[j])*(x[i] - x[j]) + (y[i] - y[j])*(y[i] - y[j]) + (z[i] - z[j])*(z[i] - z[j]));
			d *= r;
			if (d <= r) {
				G.newEdge(v[i], v[j]);
			}
		}
	}

}


int main(){
	//! TODO: tests
	Graph G;
	randomGeometric(G, 100, 10.5);

	return 0;
}
